# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: WUProtos/Data/Token/GcmToken.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='WUProtos/Data/Token/GcmToken.proto',
  package='WUProtos.Data.Token',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\"WUProtos/Data/Token/GcmToken.proto\x12\x13WUProtos.Data.Token\"#\n\x08GcmToken\x12\x17\n\x0fregistration_id\x18\x01 \x01(\tb\x06proto3')
)




_GCMTOKEN = _descriptor.Descriptor(
  name='GcmToken',
  full_name='WUProtos.Data.Token.GcmToken',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='registration_id', full_name='WUProtos.Data.Token.GcmToken.registration_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=94,
)

DESCRIPTOR.message_types_by_name['GcmToken'] = _GCMTOKEN
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

GcmToken = _reflection.GeneratedProtocolMessageType('GcmToken', (_message.Message,), dict(
  DESCRIPTOR = _GCMTOKEN,
  __module__ = 'WUProtos.Data.Token.GcmToken_pb2'
  # @@protoc_insertion_point(class_scope:WUProtos.Data.Token.GcmToken)
  ))
_sym_db.RegisterMessage(GcmToken)


# @@protoc_insertion_point(module_scope)
